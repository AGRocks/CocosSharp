<Type Name="CCAction" FullName="CocosSharp.CCAction">
  <TypeSignature Language="C#" Value="public class CCAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCAction extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>Base class for Action objects.</summary>
    <remarks>
      <para>

	Actions are orders that can be given to a <see cref="T:CococSharp.CCNode" /> object.  Actions are designed to
	alter attributes on a node (things like color, opacity,
	position, rotation, scale and visibility).

      </para>
      <para>

	Unlike other variants of the Cocos2D frameworks, on
	CocosSharp, all CCAction objects are immutable.  They contain
	a recipe that describes what needs to happen, but does not
	actually hold the state.  Because of this, the same CCAction
	can be reused with different node types.

      </para>
      <para>

	To start an action, you invoke the <see cref="M:CocosSharp.CCNode.RunAction" /> method on a node.  This
	method will in turn call <see cref="M:CocosSharp.CCAction.StartAction" /> hich the takes as a
	parameter the target node to which the action will be applied,
	and this method in turn returns the state associated with this
	object (a subclass of <see cref="T:CocosSharp.CCActionState" />.

      </para>
      <para>

	Actions that derive from <see cref="T:CocosSharp.CCActionInterval" /> alter the properties of
	a node over a period of time.  Actions that derive from <see cref="T:CocosSharp.CCActionInstant" /> apply the changes
	immediately.

      </para>
      <example>
        <code lang="c#">
            var spr = new CCSprite("Images/grossini");
            spr.Position = new CCPoint(100, 100);
            AddChild(spr);

            var act1 = new CCMoveBy (0.5f, new CCPoint(100, 0));
            spr.RunAction(new CCRepeat (act1, 1));
</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCAction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalTarget">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode OriginalTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode OriginalTarget" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set the original target, since target can be nil.
 Is the target that were used to run the action. Unless you are doing something complex, like , you should NOT call this method. The target is 'assigned', it is not 'retained'. v0.8.2 </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected virtual CocosSharp.CCActionState StartAction (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class CocosSharp.CCActionState StartAction(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public int Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Tag" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode Target { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Target" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The action will modify the target properties. </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
