<Type Name="CCActionState" FullName="CocosSharp.CCActionState">
  <TypeSignature Language="C#" Value="public class CCActionState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCActionState extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsulates the state of an action that is currently executing.</summary>
    <remarks>
      <para>
	The <see cref="T:CocosSharp.CCAction" /> objects are immutable in
	CocosSharp.  When the method <see cref="M:CocosSharp.CCAction.StartAction" /> is invoked, a new
	state object is created to keep track of the state of the object
	over time.
      </para>
      <para>

	The CCActionState is initialized with both the immutable
	action (which provides the parameters for what the state
	should do) as well as the target node on which the state will
	operate.

      </para>
      <para>
	
	If you are creating your own CCAction, you should also
	implement your own CCActionState and override at the <see cref="M:CocosSharp.CCActionState.Update" /> method.
	Additionally, you can override also the <see cref="M:CocosSharp.CCActionState.Stop" />, <see cref="M:CocosSharp.CCActionState.Step" /> methods and the 
	<see cref="P:CocosSharp.CCActionState.IsDone" /> property.

      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionState (CocosSharp.CCAction action, CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CocosSharp.CCAction action, class CocosSharp.CCNode target) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="action" Type="CocosSharp.CCAction" />
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="action">Action that is creating this state object.</param>
        <param name="target">The node to which the action will be applied..</param>
        <summary>Constructs a new CCActionState with the given action as its recipe, and the target as the node to alter.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public CocosSharp.CCAction Action { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCAction Action" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDone">
      <MemberSignature Language="C#" Value="public virtual bool IsDone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDone" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalTarget">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode OriginalTarget { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode OriginalTarget" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Step">
      <MemberSignature Language="C#" Value="public virtual void Step (float dt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Step(float32 dt) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dt" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dt">Delta time since last invocation.</param>
        <summary>Called every frame with it's delta time. </summary>
        <remarks>In general, you do not need to override this method, you are better off just overriding Update..</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when the action has completed.</summary>
        <remarks>
	  It will set the 'target' to null.   Developers should not call "[action stop]" manually.  Instead, they should use <see cref="M:CocosSharp.CCNode.StopAction" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public CocosSharp.CCNode Target { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CocosSharp.CCNode Target" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The node on which this action is operating.</summary>
        <value>This is set by the constructor.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (float time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float32 time) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="time">A value between 0 and 1 representing the state of the action (0 is the start, 0.5 is the middle, 1 is the end).</param>
        <summary>This method is invoked once per frame.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
