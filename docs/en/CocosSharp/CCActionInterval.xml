<Type Name="CCActionInterval" FullName="CocosSharp.CCActionInterval">
  <TypeSignature Language="C#" Value="public class CCActionInterval : CocosSharp.CCFiniteTimeAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CCActionInterval extends CocosSharp.CCFiniteTimeAction" />
  <AssemblyInfo>
    <AssemblyName>CocosSharp</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CocosSharp.CCFiniteTimeAction</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>An interval action is an action that takes place within a certain period of time. It has an start time, and a finish time. The finish time is the parameter duration plus the start time. </para>
    </summary>
    <remarks>
      <para>These <see cref="T:CocosSharp.CCActionInterval" /> actions have some interesting properties, like:<list type="bullet" /></para>
      <see cref="T:CocosSharp.CCActionInterval" />
      <list type="bullet" />
      <para>For example, you can simulate a Ping Pong effect running the action normally and then running it again in Reverse mode.</para>
      <para>Example:</para>
      <para>
        <see cref="T:CocosSharp.CCAction" /> *pingPongAction = Sequence::actions(action, action-&gt;<ref refid="classcocos2d_1_1_action_1a614cac4a6cc61d97173539e3b43b61b3" kindref="member">reverse()</ref>, NULL); </para>
      <see cref="T:CocosSharp.CCAction" />
      <ref refid="classcocos2d_1_1_action_1a614cac4a6cc61d97173539e3b43b61b3" kindref="member">reverse()</ref>
      <item>
        <description>They can run normally (default)</description>
      </item>
      <description>They can run normally (default)</description>
      <item>
        <description>They can run reversed with the reverse method</description>
      </item>
      <description>They can run reversed with the reverse method</description>
      <item>
        <description>They can run with the time altered with the Accelerate, AccelDeccel and Speed actions.</description>
      </item>
      <description>They can run with the time altered with the Accelerate, AccelDeccel and Speed actions.</description>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CCActionInterval ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CCActionInterval (float d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 d) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="d" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public override float Duration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Duration" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public float Elapsed { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Elapsed" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>how many seconds had elapsed since the actions started to run. </summary>
        <value>To be added.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FirstTick">
      <MemberSignature Language="C#" Value="protected bool FirstTick;" />
      <MemberSignature Language="ILAsm" Value=".field family bool FirstTick" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public override CocosSharp.CCFiniteTimeAction Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class CocosSharp.CCFiniteTimeAction Reverse() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCFiniteTimeAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>returns a new action that performs the exactly the reverse action </summary>
        <returns>To be added.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StartAction">
      <MemberSignature Language="C#" Value="protected override CocosSharp.CCActionState StartAction (CocosSharp.CCNode target);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class CocosSharp.CCActionState StartAction(class CocosSharp.CCNode target) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>CocosSharp.CCActionState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="CocosSharp.CCNode" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
